#!/usr/bin/env python

import os
import libs.ember as ember
import argparse
import torch
import torch.nn as nn
import numpy as np
from sklearn.externals import joblib


class ConvDoc(nn.Module):
    def __init__(self):
        super(ConvDoc,self).__init__()
        input_dim=2351
        self.conv1=nn.Conv1d(1,8,3,stride=2)
        self.conv2=nn.Conv1d(8,16,3,stride=4)
        self.conv3=nn.Conv1d(16,4,15,stride=5,dilation=10)
        self.dropout=nn.Dropout(0.2)
        
        self.clf=nn.Linear(124,2)
    def forward(self,inputs):
        batch_size=inputs.shape[0]
        inputs=inputs.unsqueeze(1)
        conv1=self.dropout(torch.relu(self.conv1(inputs)))
        conv2=self.dropout(torch.relu(self.conv2(conv1)))
        conv3=torch.relu(self.conv3(conv2))
        latent=conv3.view([batch_size,-1])
        return nn.functional.softmax(self.clf(latent),dim=-1)

def main():
    prog = "classify_binaries"
    descr = "Use a trained ConvDoc model to make predictions on PE files."
    parser = argparse.ArgumentParser(prog=prog, description=descr)
    parser.add_argument("-m", "--modelpath", type=str, default='models/ConvDoc', help="Ember model")
    parser.add_argument("binary", metavar="BINARY", type=str,  help="PE files to classify")
    print('-'*50)
    print('ConvDoc Malware detection utility')
    print('\tAuthors: Subhojeet Pramanik, Hemanth Teja')
    print('-'*50)
    args = parser.parse_args()
    scaler_path=os.path.join(args.modelpath,'scaler.pkl')
    scaler=joblib.load(scaler_path)

    binary_path=args.binary
    file_data = open(binary_path, "rb").read()
    features=ember.get_feature_pe(file_data)
    features=scaler.transform(features.reshape([1,-1]))
    features=torch.tensor(features)
    
    model_path=os.path.join(args.modelpath,'model.pth')
    model=ConvDoc()
    model.load_state_dict(torch.load(model_path))
    model=model.eval()
    pred=model(features).detach().numpy()
    prediction=pred[0].argmax()
    prob=float(pred[0][prediction])    
    print('-'*50)
    print('RESULT')
    print('-'*50)
    if prediction==0:
        print('ConvDoc Analysis result: Not a malware \nPrediction probability: %f'%prob)
    else:
        print('ConvDoc Analysis result: Malware \nPrediction probability: %f'%prob)
    print('-'*50)
    print('-'*50)

if __name__ == "__main__":
    main()